#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout(local_size_x = 4, local_size_y = 4) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

#define PI 3.141592
#define Inf 1000000.0
#define Epsilon 0.0001

#define MaxBounces 10
#define SHADOW 0.35


struct Ray
{
	vec3 origin;
	vec3 direction;
};

struct Material
{
	vec3 colour;
	int type;
};


struct Plane
{
	vec3 normal;
	float leng;

	Material mat;
};

struct Sphere
{
	vec3 position;
	float radius;

	Material mat;
};


uniform Sphere spheres[3];

uniform Plane planes[6];

const float indexOfRefraction = 1.5f;

//////////////////////////////

vec3 Camera (in float x, in float y)
{
	ivec2 dimensions = imageSize(img_output);
	float w = dimensions.x;
	float h = dimensions.y;

	float fovX = PI / 4;
	float fovY = (h / w) * fovX;

	float _x = ((2 * x - w) / w) * tan(fovX);
	float _y = -((2 * y - h) / h) * tan(fovY);

	return vec3(_x, _y, -1.0);
}


float PlaneIntersection (in Ray ray, in Plane plane)
{
	float d0 = dot(plane.normal, ray.direction);
	
	if (d0 != 0)
	{
		float t = -1 * (((dot(plane.normal, ray.origin)) + plane.leng) / d0);
		return (t > Epsilon) ? t : 0;
	}

	return 0;
}

float SphereIntersection (in Ray ray, in Sphere sphere)
{
	vec3 delta = ray.origin - sphere.position;
	float b = dot((delta * 2), ray.direction);
	float c = dot(delta, delta) - (sphere.radius * sphere.radius);

	float disc = b * b - 4 * c;
	if (disc < 0)
		return 0;
	else
		disc = sqrt(disc);

	// Always 2 solutions when pulling the square root.
	float result1 = -b + disc;
	float result2 = -b - disc;

	return (result2 > Epsilon) ? result2 / 2 : ((result1 > Epsilon) ? result1 / 2 : 0);
}

vec3 GetSphereNormal (in vec3 hitPos, in Sphere sphere)
{
	return (hitPos - sphere.position) / sphere.radius;
}

bool TryGetIntersection (in Ray ray, out int id, out float distance, out bool sphere)
{
	id = -1;
	distance = Inf;
	
	for (int i = 0; i < planes.length(); i++)
	{
		Plane p = planes[i];
		float dist = PlaneIntersection (ray, p);
		if (dist > Epsilon && dist < distance)
		{
			distance = dist;
			id = i;
			sphere = false;
		}
	}
	
	for (int i = 0; i < spheres.length(); i++)
	{
		Sphere s = spheres[i];
		float dist = SphereIntersection(ray, s);
		if (dist > Epsilon && dist < distance)
		{
			distance = dist;
			id = i;
			sphere = true;
		}
	}

	return (id > -1) ? true : false;
}

float GetShadow (in Ray ray, in int id, in bool isSphere, in float maxDist)
{
	float distance = Inf;

	for (int i = 0; i < planes.length(); i++)
	{
		Plane p = planes[i];
		if (!isSphere && i == id)
			continue;

		float dist = PlaneIntersection (ray, p);
		if (dist > Epsilon && dist < distance)
		{
			distance = dist;
		}
	}
	for (int i = 0; i < spheres.length(); i++)
	{
		Sphere s = spheres[i];
		if (isSphere && i == id)
			continue;

		float dist = SphereIntersection(ray, s);
		if (dist > Epsilon && dist < distance)
		{
			distance = dist;
		}
	}

	if (distance < maxDist)
		return SHADOW;

	return 1.0;
}


void ReflectRay(inout Ray ray, in vec3 hitNormal, in Material mat)
{
	// Specular BRDF
	if (mat.type == 2)
	{
		float cost = dot(ray.direction, hitNormal);
		vec3 direction = (ray.direction - hitNormal * (cost * 2));
		ray.direction = normalize(direction);
	}
}

void RefractRay(inout Ray ray, in vec3 hitNormal, in Material mat)
{
	if(mat.type == 3)
	{
		float cosi = dot(ray.direction, hitNormal);
		// float cosi = clamp(-1, 1, dot(ray.direction, hitNormal));
		float etai = 1;
		float etat = indexOfRefraction; 
		vec3 n = hitNormal; 
		if (cosi < 0) 
		{ 
			cosi = -cosi; 
		} 
		else 
		{ 
			// Swap etai with etat
			float temp = etai;
			etai = etat;
			etat = temp;

			n = -hitNormal; 
		} 
		float eta = etai / etat; 
		float k = 1 - eta * eta * (1 - cosi * cosi); 
		
		if(k < 0)
			ray.direction = vec3(0);
		else
			ray.direction = eta * ray.direction + (eta * cosi - sqrt(k)) * n; 
	}
}


vec3 lightPos ()
{
	return vec3(0, 2.95, -3.2);
}


vec3 Light(in vec3 hitPoint)
{
	if ((abs(hitPoint.y - 2.95) < 0.1) && hitPoint.x >= -0.6 && hitPoint.x <= 0.6
		&& hitPoint.z <= -3.05 && hitPoint.z >= -3.45)
		return vec3(50, 50, 50);

	return vec3(0, 0, 0);
}
//////////////////////////////


vec3 Trace (inout Ray ray, out vec3 hitNormal)
{
	vec3 finalColour = vec3(1.0);

	for (int i = 0; i < MaxBounces; i++)
	{
		int id;
		float dist;
		bool isSphere; // Is the hitted object a sphere, or a plane ?
		bool intersection = TryGetIntersection(ray, id, dist, isSphere);
		if (!intersection)
		{
			finalColour *= vec3(1.0);
			break;
		}

		// All Spheres
		Sphere s = spheres[id];
		// All planes
		Plane p = planes[id];
		// Find hit point
		vec3 hitPoint = ray.origin + ray.direction * dist;
		// New ray origin
		ray.origin = hitPoint;
		hitNormal = (isSphere) ? GetSphereNormal(hitPoint, s) : p.normal;

		Material mat = (isSphere) ? s.mat : p.mat;


		vec3 emission = Light(hitPoint);
		if (length(emission) > Epsilon)
			return finalColour * emission;

		// If reflect
		if(mat.type == 2)
			ReflectRay(ray, hitNormal, mat);
		// If refract
		if(mat.type == 3)
			RefractRay(ray, hitNormal, mat);

		if (mat.type == 1)
		{
			vec3 lightDir = normalize(lightPos() - hitPoint);
			float lightAttenuation = clamp(dot(hitNormal, lightDir), 0.1, 1.0);

			finalColour = finalColour * lightAttenuation * mat.colour;

			// Shadow Ray
			Ray shadowRay;
			shadowRay.origin = hitPoint;
			shadowRay.direction = lightDir;
			float maxDist = length(lightPos() - hitPoint);
			
			finalColour *= GetShadow(shadowRay, id, isSphere, maxDist);
			//

			break;
		}
	}

	return finalColour;
}


void main()
{
	uint idx = gl_GlobalInvocationID.x;
	uint idy = gl_GlobalInvocationID.y;


	Ray ray;
	ray.origin = vec3(0, 0, -0.1);
	vec3 cam = Camera(idx, idy);
	ray.direction = normalize( (cam - ray.origin));

	vec3 finalColour = vec3(0.0);
	vec3 hitNormal;
	finalColour = Trace(ray, hitNormal);	

	finalColour = vec3(clamp(finalColour.x, 0.0, 1.0), clamp(finalColour.y, 0.0, 1.0), clamp(finalColour.z, 0.0, 1.0));

	imageStore(img_output, ivec2(gl_GlobalInvocationID.xy), vec4(finalColour, 0.0));
	// imageStore(img_output, ivec2(gl_GlobalInvocationID.xy), vec4(colour, 0.0));
}